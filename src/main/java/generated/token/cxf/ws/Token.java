package generated.token.cxf.ws;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * This class was generated by Apache CXF 3.2.5
 * 2018-08-16T17:54:14.280+03:00
 * Generated source version: 3.2.5
 *
 */
@WebServiceClient(name = "Token",
                  wsdlLocation = "http://40.113.2.64:6001/Token.svc?wsdl",
                  targetNamespace = "http://tempuri.org/")
public class Token extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://tempuri.org/", "Token");
    public final static QName BasicHttpBindingITokenService1 = new QName("http://tempuri.org/", "BasicHttpBinding_ITokenService1");
    public final static QName BasicHttpBindingITokenService = new QName("http://tempuri.org/", "BasicHttpBinding_ITokenService");
    public final static QName WSHttpBindingITokenService = new QName("http://tempuri.org/", "WSHttpBinding_ITokenService");
    public final static QName WSHttpBindingITokenService1 = new QName("http://tempuri.org/", "WSHttpBinding_ITokenService1");
    static {
        URL url = null;
        try {
            url = new URL("http://40.113.2.64:6001/Token.svc?wsdl");
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(Token.class.getName())
                .log(java.util.logging.Level.INFO,
                     "Can not initialize the default wsdl from {0}", "http://40.113.2.64:6001/Token.svc?wsdl");
        }
        WSDL_LOCATION = url;
    }

    public Token(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public Token(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public Token() {
        super(WSDL_LOCATION, SERVICE);
    }

    public Token(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    public Token(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    public Token(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }




    /**
     *
     * @return
     *     returns ITokenService
     */
    @WebEndpoint(name = "BasicHttpBinding_ITokenService1")
    public ITokenService getBasicHttpBindingITokenService1() {
        return super.getPort(BasicHttpBindingITokenService1, ITokenService.class);
    }

    /**
     *
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns ITokenService
     */
    @WebEndpoint(name = "BasicHttpBinding_ITokenService1")
    public ITokenService getBasicHttpBindingITokenService1(WebServiceFeature... features) {
        return super.getPort(BasicHttpBindingITokenService1, ITokenService.class, features);
    }


    /**
     *
     * @return
     *     returns ITokenService
     */
    @WebEndpoint(name = "BasicHttpBinding_ITokenService")
    public ITokenService getBasicHttpBindingITokenService() {
        return super.getPort(BasicHttpBindingITokenService, ITokenService.class);
    }

    /**
     *
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns ITokenService
     */
    @WebEndpoint(name = "BasicHttpBinding_ITokenService")
    public ITokenService getBasicHttpBindingITokenService(WebServiceFeature... features) {
        return super.getPort(BasicHttpBindingITokenService, ITokenService.class, features);
    }


    /**
     *
     * @return
     *     returns ITokenService
     */
    @WebEndpoint(name = "WSHttpBinding_ITokenService")
    public ITokenService getWSHttpBindingITokenService() {
        return super.getPort(WSHttpBindingITokenService, ITokenService.class);
    }

    /**
     *
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns ITokenService
     */
    @WebEndpoint(name = "WSHttpBinding_ITokenService")
    public ITokenService getWSHttpBindingITokenService(WebServiceFeature... features) {
        return super.getPort(WSHttpBindingITokenService, ITokenService.class, features);
    }


    /**
     *
     * @return
     *     returns ITokenService
     */
    @WebEndpoint(name = "WSHttpBinding_ITokenService1")
    public ITokenService getWSHttpBindingITokenService1() {
        return super.getPort(WSHttpBindingITokenService1, ITokenService.class);
    }

    /**
     *
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns ITokenService
     */
    @WebEndpoint(name = "WSHttpBinding_ITokenService1")
    public ITokenService getWSHttpBindingITokenService1(WebServiceFeature... features) {
        return super.getPort(WSHttpBindingITokenService1, ITokenService.class, features);
    }

}
